---
import RenderTldr from './RenderTldr.astro';
import Authors from './Authors.astro';

interface Props {
  entry: any;                  // CollectionEntry<'projects' | 'writing'>
  kind: 'project' | 'writing';
}
const { entry, kind } = Astro.props;
const d = entry.data || {};
const slug = entry.slug;

const title = d.title;
const dateISO = d.date ? new Date(d.date).toISOString().slice(0,10) : '';
const venue = kind === 'project' ? d.venue : undefined;

const img = kind === 'project' ? d.images?.teaser : d.image;
const imgAlt = kind === 'project' ? d.images?.alt : d.imageAlt;

const keywords: string[] = d.keywords || [];
const url = kind === 'project' ? `/projects/${slug}/` : `/writing/${slug}/`;

const tldr = d.tldr ?? d.summary ?? '';
const impact = d.impact ?? {};
const links = d.links ?? {};
const authors: string[] = d.authors || [];
---

<article class="card" data-slug={slug}>

  <!-- Row 1: Title spans full width -->
  <h3 class="card__title"><a class="link" href={url}>{title}</a></h3>

  <!-- Row 2: Left = meta (+ collapsible details), Right = small teaser (if it loads) -->
  <div class="card__row">
    <div class="card__meta">
      <small>
        <time datetime={dateISO}>{dateISO}</time>{venue ? ` • ${venue}` : ''}
      </small>

      {kind === 'project' && authors.length > 0 && (
        <Authors authors={authors} />
      )}

      {(links.code || links.demo || links.paper || links.website || links.explainer || links.x) && (
        <p class="card__links">
          {links.paper && (<a class="link" href={links.paper} rel="noopener noreferrer">Paper</a>)}{links.code && ' • '}
          {links.code && (<a class="link" href={links.code} rel="noopener noreferrer">Code</a>)}{links.demo && ' • '}
          {links.demo && (<a class="link" href={links.demo} rel="noopener noreferrer">Demo</a>)}{links.website && ' • '}
          {links.website && (<a class="link" href={links.website} rel="noopener noreferrer">Project site</a>)}{links.explainer && ' • '}
          {links.explainer && (<a class="link" href={links.explainer}>Explainer</a>)}{links.x && ' • '}
          {links.x && (<a class="link" href={links.x} rel="noopener noreferrer">X post</a>)}
        </p>
      )}

      {keywords.length > 0 && (
        <div class="card__tags">
          {keywords.map((t) => (
            <a class="tag" href={`/tags/${String(t).toLowerCase()}/`}>{t}</a>
          ))}
        </div>
      )}

      <!-- Collapsible details now live inside the left column (no grid row => no reserved gap) -->
      <div class="card__details">
        {tldr && (<RenderTldr tldr={tldr} />)}
        {kind === 'project' && (d.status || Object.keys(impact).length > 0) && (
          <p class="muted card__impact">
            {d.status ? (<><strong>Status:</strong> {d.status}. </>) : null}
            {impact.citations ? (<><strong>Citations:</strong> {impact.citations}. </>) : null}
            {impact.github_stars ? (<><strong>GitHub stars:</strong> {impact.github_stars}. </>) : null}
            {impact.downloads ? (<><strong>Downloads:</strong> {impact.downloads}. </>) : null}
          </p>
        )}
      </div>

      <!-- Mobile/touch toggle; hidden on hover-capable devices -->
      <div class="card__actions">
        <button class="btn btn--ghost small" data-toggle type="button" aria-expanded="false">More</button>
      </div>
    </div>

    {img && (
      <div class="card__media-wrap">
        <a href={url} aria-label={`Open ${title}`}>
          <img
            class="card__media"
            src={img}
            alt={imgAlt || ''}
            loading="lazy"
            decoding="async"
            width="320"
            height="180"
            sizes="(max-width: 900px) 92vw, 220px"
          />
        </a>
      </div>
    )}
  </div>

  <style>
    .card {
    border: 1px solid var(--border);
    border-radius: var(--radius);
    padding: 12px;                    /* tighter */
    display: grid;
    grid-template-rows: auto auto;    /* title row + content row */
    gap: 8px;
    }

    /* Title spans full width */
    .card__title { margin: 0; }

    /* === Content row: left meta + small teaser right (only when image is visible) === */
    .card__row {
    --teaser-w: 200px;                /* ← tweak this (e.g., 180–240) to taste */
    display: grid;
    grid-template-columns: 1fr;
    gap: 10px;
    align-items: start;
    }
    @media (min-width: 860px) {
    .card__row.has-media { grid-template-columns: 1fr var(--teaser-w); }
    .card__row:has(.card__media-wrap:not([hidden])) { grid-template-columns: 1fr var(--teaser-w); }
    }

    /* === Meta column becomes a grid; we control spacing with row-gap, not margins === */
    .card__meta {
    display: grid;
    row-gap: 6px;                     /* global vertical rhythm */
    align-content: start;
    }
    .card__meta > * { margin: 0; }      /* kill default P/div margins */
    /* remove any bottom margin from the very last element in the meta column */
    .card__meta > :last-child { margin-bottom: 0 !important; }

    /* Authors line + tags + links now follow the grid spacing, not their own margins */
    .card__authors { color: var(--ink); font-size: 0.95em; }
    .card__tags    { display: flex; flex-wrap: wrap; gap: 6px; }
    .card .tag     { font-size: 0.85em; padding: 2px 8px; border: 1px solid var(--border); border-radius: 999px; }
    .card__links   { font-size: 0.95em; }

    /* Teaser image (only when present) */
    .card__media { width: 100%; height: auto; aspect-ratio: 16 / 9; object-fit: cover; border-radius: 6px; border: 1px solid var(--border); }

    /* === Collapsible details INSIDE meta column === */
    .card__details {
    /* absolutely no space when collapsed */
    max-height: 0;
    overflow: hidden;                 /* wide support vs 'clip' */
    opacity: 0;
    /* no margins at all while collapsed */
    margin: 0 !important;
    transition: max-height .25s ease, opacity .2s ease;
    }
    .card__details > * { margin: 0 0 8px 0; }     /* tidy spacing when open */
    .card__details > *:last-child { margin-bottom: 0; }

    @media (prefers-reduced-motion: reduce) {
    .card__details { transition: none; }
    }

    /* Desktop hover/focus reveals; keep it tight by not adding extra margins */
    @media (hover: hover) and (pointer: fine) {
    .card__actions { display: none; }
    .card:hover .card__details,
    .card:focus-within .card__details {
        max-height: 1000px;
        opacity: 1;
    }
    }

    /* Mobile/explicit open */
    .card.is-open .card__details {
    max-height: 1000px;
    opacity: 1;
    }

    /* Optional: slightly smaller gap on large screens for denser look */
    @media (min-width: 860px) {
    .card { gap: 6px; }               /* title↔content gap */
    }
  </style>

  <script is:inline>
    (() => {
      const card = document.currentScript?.closest('.card');
      if (!card) return;

      // Toggle for touch/mobile
      const btn = card.querySelector('[data-toggle]');
      if (btn) {
        btn.addEventListener('click', () => {
          const open = card.classList.toggle('is-open');
          btn.setAttribute('aria-expanded', open ? 'true' : 'false');
          btn.textContent = open ? 'Less' : 'More';
        });
      }

      // Collapse media column if the image fails to load; also mark when it exists
      const row  = card.querySelector('.card__row');
      const wrap = card.querySelector('.card__media-wrap');
      const img  = wrap?.querySelector('img');

      const updateCols = () => {
        if (!row) return;
        const hasMedia = !!(wrap && !wrap.hasAttribute('hidden'));
        row.classList.toggle('has-media', hasMedia); // fallback for browsers without :has
      };

      if (img) {
        if (img.complete && img.naturalWidth === 0) { wrap.setAttribute('hidden', ''); }
        img.addEventListener('error', () => { wrap.setAttribute('hidden', ''); updateCols(); });
        img.addEventListener('load',  () => { wrap.removeAttribute('hidden'); updateCols(); });
      }
      updateCols();
    })();
  </script>
</article>
