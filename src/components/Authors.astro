---
/**
 * Authors renderer with:
 * - bold highlight (highlight: true)
 * - equal-contribution marker (equal: true) â†’ superscript *
 * - optional author URL
 * Accepts array of strings or objects { name, url?, highlight?, equal? }.
 */
const { authors = [] } = Astro.props;

// normalize to objects
const A = authors.map((a: any) =>
  typeof a === "string" ? { name: a } : a ?? {}
);

// detect if any equal markers to show legend
const hasEqual = A.some(a => a?.equal === true);
---

<div class="authors">
  {A.map((a, i) => {
    const name = a?.name ?? "";
    const isMe = a?.highlight === true;
    const content = (
      <>
        {isMe ? <strong>{name}</strong> : name}
        {a?.equal === true && (
          <>
            <sup class="marker" aria-hidden="true">*</sup>
            <span class="sr-only"> (equal contribution)</span>
          </>
        )}
      </>
    );
    return (
      <span class="author" key={i}>
        {a?.url
          ? <a href={a.url} target="_blank" rel="noopener noreferrer">{content}</a>
          : content}
        {i < A.length - 1 ? <span class="sep">, </span> : null}
      </span>
    );
  })}
</div>

{hasEqual && (
  <div class="legend">
    <small class="muted"><sup class="marker" aria-hidden="true">*</sup> equal contribution</small>
  </div>
)}

<style>
  .authors { font-size: 0.95rem; color: var(--muted); }
  .author { white-space: break-spaces; }
  .author a { color: inherit; text-decoration: underline; text-underline-offset: 3px; }
  .author strong { font-weight: 700; color: var(--ink); }
  .sep { color: var(--muted); }
  .marker { font-size: 0.8em; line-height: 0; vertical-align: super; margin-left: 2px; }
  .legend { margin-top: 4px; }
  .sr-only {
    position: absolute; width: 1px; height: 1px; padding: 0; margin: -1px;
    overflow: hidden; clip: rect(0,0,0,0); white-space: nowrap; border: 0;
  }
</style>
