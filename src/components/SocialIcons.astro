---
import { SOCIALS } from "../data/socials";
const { size = 28, className = "" } = Astro.props; // default bigger
const px = typeof size === "number" ? `${size}px` : size;
---
<nav class={`socials ${className}`} aria-label="Social links">
  {SOCIALS.map((s) => {
    const isEmail = s.kind === "email";
    return (
      <a
        class="social"
        href={isEmail ? "/contact/" : s.href}
        target={isEmail ? undefined : "_blank"}
        rel={isEmail ? undefined : "noopener noreferrer"}
        data-user={isEmail ? [...s.user].reverse().join("") : undefined}
        data-domain={isEmail ? [...s.domain].reverse().join("") : undefined}
        aria-label={s.label}
        title={s.label}
      >
        <i class={s.icon} aria-hidden="true"></i>
        <span class="sr-only">{s.label}</span>
      </a>
    );
  })}
</nav>

<style>
  :root { --social-size: /* fallback */ 28px; }
  /* allow the passed 'size' to set the CSS variable */
  .socials { --social-size:px; display:flex; gap:10px; align-items:center; }

  /* the clickable box */
  .social {
    display:inline-grid;
    place-items:center;
    inline-size: var(--social-size);
    block-size: var(--social-size);
    min-inline-size: var(--social-size);
    padding: 0;
    border-radius: 6px;
    color: var(--muted);
    transition: color .12s ease, transform .08s ease;
  }

  /* icon sizing: keep it a little smaller than the container */
  .social i {
    font-size: calc(var(--social-size) * 0.62); /* tune: 0.6â€“0.75 works well */
    line-height: 1;
    display:block;
    color: currentColor;
  }

  /* hover / focus */
  .social:hover, .social:focus-visible {
    color: var(--ink);
    transform: translateY(-2px); /* micro-lift; small and quick */
  }
  @media (prefers-reduced-motion: reduce) {
    .social { transition: none; transform: none; }
  }

  /* visually-hidden accessible text */
  .sr-only {
    position: absolute; width: 1px; height: 1px; padding: 0; margin: -1px;
    overflow: hidden; clip: rect(0,0,0,0); white-space: nowrap; border: 0;
  }
</style>

<script is:inline>
  // mailto assembly (same as before)
  document.currentScript?.previousElementSibling?.querySelectorAll('.social[data-user]').forEach((el) => {
    el.addEventListener('click', (e) => {
      const u = el.getAttribute('data-user')?.split('').reverse().join('');
      const d = el.getAttribute('data-domain')?.split('').reverse().join('');
      if (u && d) {
        e.preventDefault();
        window.location.href = `mailto:${u}@${d}`;
      }
    }, { passive: false });
  });
</script>
